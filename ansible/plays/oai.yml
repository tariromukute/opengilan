- name: Stop 5g core (Ensure previous tested is not running)
  ansible.builtin.shell: docker compose -f docker-compose-basic-nrf-1.yaml down
  args:
    chdir: /home/{{ user }}/oai-cn5g-fed/docker-compose
  register: output
  when:
    - inventory_hostname in groups["az_sut"]

- ansible.builtin.debug:
    var: output

- name: Wait 2 minutes for all services to be down
  ansible.builtin.pause:
    minutes: 2

- name: Start 5G Core
  ansible.builtin.shell: docker compose -f docker-compose-basic-nrf-1.yaml up -d
  args:
    chdir: /home/{{ user }}/oai-cn5g-fed/docker-compose
  register: output
  when:
    - inventory_hostname in groups["az_sut"]

- ansible.builtin.debug:
    var: output

- name: Wait 2 minutes for all services to be up
  ansible.builtin.pause:
    minutes: 2

- name: Start the eBPF scripts to collect results
  ansible.builtin.shell: ./main.sh {{ tool }} {{ duration }} 1 {{ duration }}
  args:
    chdir: /home/{{ user }}/tools/bcc/tools
    executable: /bin/bash
  async: "{{ duration }}"
  poll: 0
  become: yes
  when:
    - inventory_hostname in groups["az_sut"]

- name: Sleep for 2 seconds (to load the eBPF programs) and continue with play
  wait_for:
    timeout: 2
  delegate_to: localhost

- name: Start 5G core traffic generator
  ansible.builtin.command:
    cmd: ./.venv/bin/python3 src/app.py -t {{ duration }} -i {{ interval }} -n {{ ues }} -f /tmp/core-tg -u src/config/oai-cn5g-ue.yaml -g src/config/oai-cn5g-gnb.yaml
    chdir: /home/{{ user }}/core-tg
  when:
    - inventory_hostname in groups["az_trex"]
  register: trex_command
  async: "{{ aduration }}"
  poll: 0
  # become: yes
  ignore_errors: yes

- name: Check on an async task for {{ tool }} (bpftrace)
  async_status:
    jid: "{{ trex_command.ansible_job_id }}"
  when:
    - inventory_hostname in groups["az_trex"]
  register: job_result
  until: job_result.finished
  retries: 100
  delay: 10
  # become: yes
  ignore_errors: yes

- name: Fetch stuff from the remote and save to local
  synchronize:  src=/home/{{ user }}/tools/bcc/tools/results/ dest=.results/kpps={{ ues }} mode=pull
  when:
    - inventory_hostname in groups["az_sut"]

- name: Delete content & directory
  file:
    state: absent
    path: /home/{{ user }}/tools/bcc/tools/results/
  become: yes
  when:
    - inventory_hostname in groups["az_sut"]
# ======================

# - name: Find container logs
#   command: find /var/lib/docker/containers/ -iname *-json.log
#   register: logs_to_copy
#   become: yes
#   when:
#     - inventory_hostname in groups["az_sut"]

# - ansible.builtin.debug:
#     var: logs_to_copy
#   when:
#     - inventory_hostname in groups["az_sut"]
#   become: yes

# - name: Fetch the docker logs
#   fetch:
#     src: "{{ file }}"
#     dest: results/kpps={{ ues }}/tool={{ tool }}
#     validate_checksum: false
#   loop: "{{ logs_to_copy.stdout_lines }}"
#   loop_control:
#     loop_var: file
#   # become: yes
#   when:
#     - inventory_hostname in groups["az_sut"]
#   register: output

- name: Get results from tracing (bpftrace)
  ansible.builtin.shell: docker compose -f docker-compose-basic-nrf-1.yaml logs --tail 100
  register: tool_command_results
  args:
    chdir: /home/{{ user }}/oai-cn5g-fed/docker-compose
  when:
    - inventory_hostname in groups["az_sut"]


- local_action: copy content="{{ tool_command_results.stdout }}" dest=.results/kpps={{ ues }}/tool={{ tool }}/docker.log
  when:
    - inventory_hostname in groups["az_sut"]


# ---------------------
# - name: Fetch the docker logs
#   synchronize:  src="{{ file }}" dest=results mode=pull
#   loop: "{{ logs_to_copy.stdout_lines }}"
#   loop_control:
#     loop_var: file
#   become: yes
#   when:
#     - inventory_hostname in groups["az_sut"]
#   register: output

# docker compose -f docker-compose-basic-nrf-1.yaml logs --tail 100
# needs become on the other side...
# - name: Fetch the archive to local machine
#   shell: |
#     ssh '{{ hostvars[run_on].ansible_user }}@{{ run_on }}' 'sudo cat "{{ file }}"' > 'results/kpps={{ ues }}/tool={{ tool }}/{{ my_idx}}'
#   delegate_to: 'localhost'
#   loop: "{{ logs_to_copy.stdout_lines }}"
#   loop_control:
#     loop_var: file
#     index_var: my_idx
#   register: output

# ------------------------------

- name: Fetch 5G Core traffic generator logs
  synchronize:  src=/tmp/core-tg/ dest=.results/kpps={{ ues }}/tool={{ tool }} mode=pull
  when:
    - inventory_hostname in groups["az_trex"]


- name: Delete content & directory
  file:
    state: absent
    path: /tmp/core-tg
  when:
    - inventory_hostname in groups["az_trex"]